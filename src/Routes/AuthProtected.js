import React, { useEffect } from "react";
import { Navigate, Route, useNavigate } from "react-router-dom"; // Importer useNavigate
import { setAuthorization } from "../helpers/api_helper";
import { useDispatch } from "react-redux";
import Swal from "sweetalert2";
import { useProfile } from "../Components/Hooks/UserHooks";
import { logoutUser } from "../store/actions";

const AuthProtected = (props) => {
  const dispatch = useDispatch();
  const navigate = useNavigate(); // Utiliser useNavigate pour la redirection
  const { userProfile, loading, token } = useProfile();
  console.log("üîé AuthProtected: { token:", token, ", userProfile:", userProfile, ", loading:", loading, "}");

  // Fonction pour v√©rifier si le token est expir√©
  const isTokenExpired = (token) => {
    try {
      const decoded = JSON.parse(atob(token.split(".")[1])); // D√©coder le payload du token
      if (!decoded || !decoded.exp) return true; // Si le token est invalide ou n'a pas de date d'expiration

      const expirationTime = decoded.exp * 1000; // Convertir en millisecondes
      return Date.now() > expirationTime; // V√©rifier si le token est expir√©
    } catch (err) {
      return true; // En cas d'erreur, consid√©rer le token comme expir√©
    }
  };

  useEffect(() => {
    if (userProfile && !loading && token) {
      setAuthorization(token);
    } else if (!userProfile && loading && !token) {
      dispatch(logoutUser());
    }
  }, [token, userProfile, loading, dispatch]);

  const storedToken = localStorage.getItem("token");

  // Si aucun token n'est trouv√©, rediriger vers /login
  if (!storedToken) {
    console.log("üö® Aucun token trouv√©, redirection vers /login...");
    return <Navigate to="/login" />;
  }

  // Si le token est expir√©, afficher une alerte et rediriger vers /login
  if (isTokenExpired(storedToken)) {
    console.log("üö® Token expir√©, redirection vers /login...");

    Swal.fire({
      title: "ÿßŸÜÿ™Ÿáÿ™ ÿßŸÑÿ¨ŸÑÿ≥ÿ©",
      text: "ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑÿ¨ŸÑÿ≥ÿ©. Ÿäÿ±ÿ¨Ÿâ ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ.",
      icon: "warning",
      confirmButtonText: "ÿ≠ÿ≥ŸÜÿßŸã",
      confirmButtonColor: "#3085d6",
    }).then(() => {
      localStorage.removeItem("token"); // Supprimer le token expir√©
      localStorage.removeItem("user"); // Supprimer les donn√©es utilisateur
      dispatch(logoutUser()); // D√©connecter l'utilisateur dans Redux (si utilis√©)
      navigate("/login"); // Rediriger vers /login avec useNavigate
    });

    return null; // Retourner null pour √©viter de rendre le composant pendant l'affichage de l'alerte
  }

  console.log("‚úÖ Token trouv√© et valide:", storedToken);
  setAuthorization(storedToken); // üî• Ajout pour forcer l'auth

  return <>{props.children}</>;
};

const AccessRoute = ({ component: Component, ...rest }) => {
  return (
    <Route
      {...rest}
      render={(props) => {
        return (
          <>
            <Component {...props} />
          </>
        );
      }}
    />
  );
};

export { AuthProtected, AccessRoute };